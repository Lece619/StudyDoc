MyBatis 프레임워크 		--하이버네이트 등 배우기용이

JDBC - 단순 자바와 데이터베이스 연동하는 라이브러리

	만약 오라클 서버가 여러개 거나 오라클이나 Mysql등 사용하는 db툴이 다르거나 할때 어떻게 해야 할까.
	DBConnection 객체를 미리 몇개 올려놓고 미리 올려져있는 객체를 사용하고 반납하는 기법을 사용한다

DBCP(DataBase Connection Pool) 
	사용자 요청이 있을 때 마다 DB 연결을 한다면 코드가 복잡해지며,
	많은 요청이 있을 때 연결 속도가 저하될 수 있다.
	따라서 미리 Connection을 만들어 두고, 필요 시 저장된 공간에서 가져다 쓴 후 반화하는 기법이다.

	커넥션 풀을 설정하고 그걸 객체를 가져와서 쓸수 있도록 만드는 것. 
	-객체를 가져오기 위한 것이 필요 - JNDI 사용
JNDI (Java Naming and Directory Interface)
	디렉터리 서비스에서 제공하는 데이터 및 객체를 발견하고 참고하기 위한 자바 API 이며,
	외부에 있는 객체를 가져오기 위한 기술이다.

결론! : ! : 컨텍스트라는 영역에 Connection 객체를 올릴건데 리소스 객체를 태그 형태로 xml 파일에 추가하고 
	JNDI가 그 객체를 확인하고 가져올수 있게한다 .

MyBatis Framework 
	예 ) JSP -> JSTL 사용하는 이유 : 태그로 통일하자 JSP에서 자바문을 사용하지말자 라는 느낌.
	MyBatis : Java 에서 SQL를 사용하지 말자! 라는 느낌.

	소스 코드 안에 SQL문을 작성하면 코드가 길어지고 섞여 있어서 유지보수 및 분업이 쉽지 않다.
	MyBatis는 기존 JDBC 방식과는 달리 SQL문을 XML파일에 작성함으로써 코드가 줄어들고,
	SQL문 수정이 편해진다. 또한 DBCP를 사용하여 커넥션을 여러 개 생성하기 때문에 JDBC만 사용하는 것보다는
	작업 효율과 가독성이 좋아진다.


작동순서 
[[[[[[[[[[[[[[[[[[[[[[[[
Application [ 실행 ] -> SqlSession Factory Builder[공장 준비] -> MyBais config file [ 공장 설계서 ]  -> SqlSession Factory Builder [공장만들기]

-> SQLsession Factory 만들어짐 -> Application[ 실행 - 사용자 요청] -> SQLsession Factory [ 만들기 ] -> SQLSession [ 만들어지면 맵핑]

-> xml파일 로 맵핑 - > 경로는 Config File 에서 찾고 -> 알맞는 SQL문 실행 


1) 응용 프로그램이 SqlSessionFactoryBuilder 를 통해 SqlSessionFactory를 빌드하도록 요청한다.
2) SqlSessionFactoryBuilder는 SqlSessionFactory를 생성하기 위한 MyBatis Config(구성) 파일을 읽는다.
3) SqlSessionFactoryBuilder는 MyBatis 구성 파일의 정의에 따라 SqlSessionFactory를 생성한다.
--------------------------사용자 요청 
4) 클라이언트가 응용 프로그램에 대한 프로세스를 요청한다.
5) 응용 프로그램은 SqlSessionFactoryBuilder를 사용하여 빌드된 SqlSessionFactory에서 SqlSession을 가져온다.
6) SqlSessionFactory는 SqlSession을 생성하고 이를 응용프로그램에 반환한다.
7) 응용 프로그램이 SqlSession에서 Mapper 인터페이스의 구현 개체를 가져온다.
8) 응용 프로그램이 Mapper 인터페이스 메소드를 호출한다.
9) Mapper 인터페이스의 구현 객체가 SqlSession의 메소드를 호출하고 SQL실행을 요청한다.
10) SqlSession은 매핑 파일에서 실행할 SQL을 가져와 SQL을 실행한다.